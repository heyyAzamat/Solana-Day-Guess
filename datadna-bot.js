const { Telegraf } = require('telegraf');
const crypto = require('crypto');
const { Connection, PublicKey, Transaction, SystemProgram, Keypair, sendAndConfirmTransaction } = require('@solana/web3.js');

// üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
const CONFIG = {
    telegramToken: '–í–ê–®_TELEGRAM_BOT_TOKEN', // –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather
    solanaNetwork: 'https://api.devnet.solana.com',
    solanaPrivateKey: [123,45,67,89,12,34,56,78,90,12,34,56,78,90,12,34,56,78,90,12,34,56,78,90,12,34,56,78,90,12,34,56,78,90,12,34,56,78,90,12,34,56,78,90,12,34,56,78,90,12,34,56,78,90,12,34,56,78,90,12,34,56,78,90]
};

// üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const bot = new Telegraf(CONFIG.telegramToken);
const solanaConnection = new Connection(CONFIG.solanaNetwork);
const solanaWallet = Keypair.fromSecretKey(Uint8Array.from(CONFIG.solanaPrivateKey));

// üìä –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è MVP)
const database = {
    files: new Map(),    // fileId -> fileData
    records: new Map()   // recordId -> {hash, fileName, etc}
};

// üß† DataDNA –∞–ª–≥–æ—Ä–∏—Ç–º
class DataDNA {
    static async generateSignature(fileBuffer) {
        const mainHash = crypto.createHash('sha256').update(fileBuffer).digest();
        const salt = crypto.randomBytes(16);
        return Buffer.concat([mainHash, salt]);
    }

    static async calculateHash(signature) {
        return crypto.createHash('sha256').update(signature).digest('hex');
    }
}

// ‚õìÔ∏è –ë–ª–æ–∫—á–µ–π–Ω —Å–µ—Ä–≤–∏—Å
class BlockchainService {
    static async saveHashToBlockchain(hash) {
        try {
            const transaction = new Transaction().add(
                SystemProgram.transfer({
                    fromPubkey: solanaWallet.publicKey,
                    toPubkey: new PublicKey('11111111111111111111111111111111'),
                    lamports: 1000,
                })
            );

            const signature = await sendAndConfirmTransaction(
                solanaConnection,
                transaction,
                [solanaWallet]
            );

            return signature;
        } catch (error) {
            console.log('–ë–ª–æ–∫—á–µ–π–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
            return 'offline-mode-' + Date.now();
        }
    }
}

// üíæ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤
class FileManager {
    static async handleFile(ctx) {
        try {
            const fileId = ctx.message.document.file_id;
            const fileName = ctx.message.document.file_name;
            
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const fileLink = await ctx.telegram.getFileLink(fileId);
            const response = await fetch(fileLink);
            const fileBuffer = await response.arrayBuffer();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É
            database.files.set(fileId, {
                buffer: Buffer.from(fileBuffer),
                name: fileName,
                size: ctx.message.document.file_size
            });

            await ctx.reply(`üìÅ –§–∞–π–ª "${fileName}" –ø–æ–ª—É—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...`);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DataDNA
            const signature = await DataDNA.generateSignature(Buffer.from(fileBuffer));
            const hash = await DataDNA.calculateHash(signature);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–ª–æ–∫—á–µ–π–Ω
            const txId = await BlockchainService.saveHashToBlockchain(hash);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            const recordId = 'rec_' + Date.now();
            database.records.set(recordId, {
                hash: hash,
                fileName: fileName,
                fileSize: ctx.message.document.file_size,
                timestamp: new Date(),
                blockchainTx: txId
            });

            await ctx.replyWithHTML(
                `‚úÖ <b>DataDNA —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
                `üìÑ –§–∞–π–ª: <code>${fileName}</code>\n` +
                `üîê –•—ç—à: <code>${hash}</code>\n` +
                `‚õì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: <code>${txId}</code>\n\n` +
                `–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–Ω —Å–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å!`
            );

        } catch (error) {
            console.error('File error:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.');
        }
    }

    static async verifyFile(ctx) {
        try {
            const fileId = ctx.message.document.file_id;
            const fileLink = await ctx.telegram.getFileLink(fileId);
            const response = await fetch(fileLink);
            const fileBuffer = await response.arrayBuffer();
            
            await ctx.reply(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞...`);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            const signature = await DataDNA.generateSignature(Buffer.from(fileBuffer));
            const actualHash = await DataDNA.calculateHash(signature);
            
            // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ
            let found = false;
            for (let [recordId, record] of database.records) {
                if (record.hash === actualHash) {
                    found = true;
                    await ctx.replyWithHTML(
                        `‚úÖ <b>–§–∞–π–ª –ø–æ–¥–ª–∏–Ω–Ω—ã–π!</b>\n\n` +
                        `üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: <code>${record.fileName}</code>\n` +
                        `üîê –°–æ–≤–ø–∞–¥–∞—é—â–∏–π —Ö—ç—à: <code>${actualHash}</code>\n` +
                        `‚è∞ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${record.timestamp.toLocaleString()}\n` +
                        `‚õì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: <code>${record.blockchainTx}</code>`
                    );
                    break;
                }
            }

            if (!found) {
                await ctx.replyWithHTML(
                    `‚ùå <b>–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ DataDNA!</b>\n\n` +
                    `–≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —á—Ç–æ:\n` +
                    `‚Ä¢ –§–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω\n` +
                    `‚Ä¢ –§–∞–π–ª –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n` +
                    `‚Ä¢ –≠—Ç–æ –ø–æ–¥–¥–µ–ª—å–Ω–∞—è –∫–æ–ø–∏—è\n\n` +
                    `–•—ç—à —Ñ–∞–π–ª–∞: <code>${actualHash}</code>`
                );
            }

        } catch (error) {
            console.error('Verify error:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞.');
        }
    }
}

// üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
bot.start((ctx) => {
    ctx.replyWithHTML(
        `üîç <b>DataDNA Verifier Bot</b>\n\n` +
        `–Ø –ø–æ–º–æ–≥–∞—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é DataDNA!\n\n` +
        `üì§ <b>–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª:</b>\n` +
        `–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π —Ñ–∞–π–ª\n\n` +
        `üîç <b>–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª:</b>\n` +
        `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏\n\n` +
        `‚ö° <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è:</b>\n` +
        `‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ —Ñ–∞–π–ª–∞\n` +
        `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–ª–æ–∫—á–µ–π–Ω Solana\n` +
        `‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏`
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
bot.on('document', async (ctx) => {
    const fileId = ctx.message.document.file_id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∞–π–ª
    if (database.files.has(fileId)) {
        await FileManager.verifyFile(ctx);
    } else {
        await FileManager.handleFile(ctx);
    }
});

// –ü–æ–º–æ—â—å
bot.help((ctx) => {
    ctx.replyWithHTML(
        `ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n\n` +
        `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
        `/help - –ü–æ–º–æ—â—å\n` +
        `/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n` +
        `üì§ <b>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á—Ç–æ–±—ã:</b>\n` +
        `‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ\n` +
        `‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å\n\n` +
        `‚ö° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n` +
        `–õ—é–±—ã–µ —Ñ–∞–π–ª—ã –¥–æ 20MB!`
    );
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.command('stats', (ctx) => {
    const blockchainTxs = Array.from(database.records.values())
        .filter(r => !r.blockchainTx.startsWith('offline-mode-')).length;
    
    ctx.replyWithHTML(
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DataDNA:</b>\n\n` +
        `üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${database.files.size}</b>\n` +
        `üîê –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö—ç—à–µ–π: <b>${database.records.size}</b>\n` +
        `‚õì –ë–ª–æ–∫—á–µ–π–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: <b>${blockchainTxs}</b>\n` +
        `üì° –û—Ñ—Ñ–ª–∞–π–Ω –∑–∞–ø–∏—Å–µ–π: <b>${database.records.size - blockchainTxs}</b>`
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('Bot error:', err);
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('ü§ñ DataDNA Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
bot.launch()
    .then(() => console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!'))
    .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));

// –≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = { bot, database, DataDNA, BlockchainService };